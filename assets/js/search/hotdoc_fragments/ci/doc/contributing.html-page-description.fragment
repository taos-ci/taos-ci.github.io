fragment_downloaded_cb({"url":"ci/doc/contributing.html#page-description","fragment":"Consistent code conventions are important for several reasons:\nPlease, refer to Coding Conventions for AuDri page.\nPlease review incoming PRs; regardless whether you are a maintainer, a designated reviewer, or just a passer-by.\nIf you are a maintainer or reviewer of the specific component, you are obligated to review incoming related PRs within some reasonable time frame.\nHowever, even if you are not a reviewer (designated by committer or maintainers) or maintainer, as long as you are in this project, you need to give feedback on PRs especially if you are working on similar topics/components.\nThe submitter has the first responsibility of keeping the created PR clean and neat (rebase whenever there are merge conflicts), following up the feedback, testing when needed.\nEach commit is required to be signed-off by the corresponding author.\nWith properly configured development environment, you can add sign-off for a commit with -s option: e.g., git commit -s.\nHere is some stories on sign-off.\nIt means that you are legally responsible for the given commit that, according to your best knowledge,\nUsually, you are not allowed to push commits of other's work; however, you may do so if you\nFrom Torvalds' (original author of Linux and git) git repo, (documentation about git commit message tags)[https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/process/5.Posting.rst].\nSigned-off-by: this is a developer's certification that he or she has\nthe right to submit the patch for inclusion into the kernel.  It is an\nagreement to the Developer's Certificate of Origin, the full text of\nwhich can be found in Documentation/process/submitting-patches.rst.  Code without a\nproper signoff cannot be merged into the mainline.\n\n\nMost importantly: To make it easy to read and understand the code. Remember: you may be the only one writing the code initially, but many people will need to read, understand, modify, and fix the code over its lifetime. These conventions attempt to make this task much easier. If the code consistently follows these standards, it improves developer understanding across the entire source base.\nTo make it easy to debug the code, with both a system call tracer and GNU debuggers. It should be easy to set breakpoints, view locals, and display and view data structures.\nTo attempt to improve code quality through consistency, and requiring patterns that are less likely to result in bugs either initially, or after code modification.\n\n\nHow to give the developers zero cost:\n\n\nIt is the original work of the author (no plagiarism or copy-pasting from external work).\nIt does not have any patents, license, or copyright issues.\nYou are granting all related rights to the community or project (depending on the licenses).\n\n\nMaintain the original authorship in the git commit (you can edit authors of a given commit: $ man git commit)\nYou can sure there is no patents, licenses, or copyright issues.\nYou can grant all related rights to the community or project (depending on the licenses)\n\n"});